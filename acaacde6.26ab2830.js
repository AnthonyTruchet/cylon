(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{118:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return b})),a.d(t,"metadata",(function(){return o})),a.d(t,"rightToc",(function(){return i})),a.d(t,"default",(function(){return u}));var n=a(2),l=(a(0),a(133));const b={id:"compile",title:"Compiling",sidebar_label:"Compiling"},o={id:"compile",isDocsHomePage:!0,title:"Compiling",description:"CMake Installation",source:"@site/docs/compile.md",permalink:"/cylon/docs/",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/compile.md",sidebar_label:"Compiling",sidebar:"someSidebar",next:{title:"C++ API",permalink:"/cylon/docs/cpp"}},i=[{value:"CMake Installation",id:"cmake-installation",children:[{value:"Install CMake 3.16.5 (Optional)",id:"install-cmake-3165-optional",children:[]}]},{value:"Python Environment",id:"python-environment",children:[]},{value:"Build C++, Python Cylon APIs",id:"build-c-python-cylon-apis",children:[]},{value:"Build C++ Cylon API",id:"build-c-cylon-api",children:[{value:"For Release Mode",id:"for-release-mode",children:[]},{value:"For Debug Mode (optional)",id:"for-debug-mode-optional",children:[]}]},{value:"Python Support",id:"python-support",children:[{value:"Example",id:"example",children:[]}]}],r={rightToc:i};function u({components:e,...t}){return Object(l.b)("wrapper",Object(n.a)({},r,t,{components:e,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"cmake-installation"},"CMake Installation"),Object(l.b)("h3",{id:"install-cmake-3165-optional"},"Install CMake 3.16.5 (Optional)"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"wget https://github.com/Kitware/CMake/releases/download/v3.16.5/cmake-3.16.5.tar.gz\ntar zxf cmake-3.16.5.tar.gz\n./bootstrap --system-curl\nmake\nsudo make install\n")),Object(l.b)("h2",{id:"python-environment"},"Python Environment"),Object(l.b)("p",null,"If you're using a virtual environment, make sure to set the virtual environment path."),Object(l.b)("p",null,"Or you can specify /usr as the path if you're installing in the system path."),Object(l.b)("p",null,"Create a virtual environment"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"cd  /home/<username>/build/twisterx\npython3 -m venv ENV\n")),Object(l.b)("p",null,"Here after we assume your Python ENV path is,"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"})," /home/<username>/build/twisterx/ENV\n")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-txt"}),"Note: User must install Pyarrow with the Cylon build to use Cylon APIs.\nDo not use a prior installed pyarrow in your python environment.\nUninstall it before running the setup.\n")),Object(l.b)("h2",{id:"build-c-python-cylon-apis"},"Build C++, Python Cylon APIs"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"./build.sh -pyenv ${PYTHON_ENV_PATH} -bpath ${TWIXTER_BUILD_DIR} --all\n")),Object(l.b)("p",null,"Example:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"./build.sh -pyenv /home/<username>/build/twisterx/ENV -bpath /home/<username>/build/twisterx/build --all\n")),Object(l.b)("p",null,"or"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"./build.sh -pyenv /usr -bpath /home/<username>/build/twisterx/build --all\n")),Object(l.b)("h2",{id:"build-c-cylon-api"},"Build C++ Cylon API"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"./build.sh -bpath /home/<username>/build/twisterx/build --cpp\n")),Object(l.b)("p",null,"If you want to build each module separately make sure you build in the following order"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"/build.sh -bpath /home/vibhatha/build/twisterx/build --cpp\n/build.sh -pyenv /home/vibhatha/build/twisterx/ENV -bpath /home/vibhatha/build/twisterx/build --pyarrow\n/build.sh -pyenv /home/vibhatha/build/twisterx/ENV -bpath /home/vibhatha/build/twisterx/build --python\n")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-txt"}),"Note: The default build mode is debug\n")),Object(l.b)("p",null,"If you want to change the build modes, do the following"),Object(l.b)("h3",{id:"for-release-mode"},"For Release Mode"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"./build.sh -bpath /home/<username>/build/twisterx/build --cpp --release\n")),Object(l.b)("h3",{id:"for-debug-mode-optional"},"For Debug Mode (optional)"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"./build.sh -bpath /home/<username>/build/twisterx/build --cpp --debug\n")),Object(l.b)("h2",{id:"python-support"},"Python Support"),Object(l.b)("p",null,"Cylon provides Python APIs with Cython."),Object(l.b)("p",null,"If you're building for the first time, you can use ",Object(l.b)("inlineCode",{parentName:"p"},"--all")," option in build.\nIf you'have already built cpp and want to compile the your changes to the API,\ndo the following,"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"./build.sh -pyenv /home/<username>/build/twisterx/ENV -bpath /home/<username>/build/twisterx/build --python\n")),Object(l.b)("h3",{id:"example"},"Example"),Object(l.b)("p",null,"Before running the code in the base path of the cloned repo\nrun the following command. Or add this to your ",Object(l.b)("inlineCode",{parentName:"p"},"bashrc"),"."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"export LD_LIBRARY_PATH=/home/<username>/twisterx/build/arrow/install/lib:/home/<username>/twisterx/build/lib:$LD_LIBRARY_PATH\n")),Object(l.b)("ol",{start:4},Object(l.b)("li",{parentName:"ol"},"Test Python API")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"python3 python/test/test_pytwisterx.py\n")))}u.isMDXComponent=!0}}]);