(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{119:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return b})),n.d(t,"default",(function(){return u}));var a=n(2),r=n(6),l=(n(0),n(135)),o={id:"compile",title:"Compiling",sidebar_label:"Compiling"},i={id:"compile",isDocsHomePage:!0,title:"Compiling",description:"CMake Installation",source:"@site/docs/compile.md",permalink:"/docs/",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/compile.md",sidebar_label:"Compiling",sidebar:"someSidebar",next:{title:"Run with MPI",permalink:"/docs/mpi"}},b=[{value:"CMake Installation",id:"cmake-installation",children:[{value:"Install CMake 3.16.5 (Optional)",id:"install-cmake-3165-optional",children:[]}]},{value:"Python Environment",id:"python-environment",children:[]},{value:"Build C++, Python Cylon APIs",id:"build-c-python-cylon-apis",children:[]},{value:"Build C++ Cylon API",id:"build-c-cylon-api",children:[{value:"For Release Mode",id:"for-release-mode",children:[]},{value:"For Debug Mode (optional)",id:"for-debug-mode-optional",children:[]}]},{value:"Python Support",id:"python-support",children:[{value:"Example",id:"example",children:[]}]}],c={rightToc:b};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"cmake-installation"},"CMake Installation"),Object(l.b)("h3",{id:"install-cmake-3165-optional"},"Install CMake 3.16.5 (Optional)"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"wget https://github.com/Kitware/CMake/releases/download/v3.16.5/cmake-3.16.5.tar.gz\ntar zxf cmake-3.16.5.tar.gz\n./bootstrap --system-curl\nmake\nsudo make install\n")),Object(l.b)("h2",{id:"python-environment"},"Python Environment"),Object(l.b)("p",null,"If you're using a virtual environment, make sure to set the virtual environment path."),Object(l.b)("p",null,"Or you can specify /usr as the path if you're installing in the system path."),Object(l.b)("p",null,"Create a virtual environment"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"cd  /home/<username>/build/twisterx\npython3 -m venv ENV\n")),Object(l.b)("p",null,"Here after we assume your Python ENV path is,"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"})," /home/<username>/build/twisterx/ENV\n")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-txt"}),"Note: User must install Pyarrow with the Cylon build to use Cylon APIs.\nDo not use a prior installed pyarrow in your python environment.\nUninstall it before running the setup.\n")),Object(l.b)("h2",{id:"build-c-python-cylon-apis"},"Build C++, Python Cylon APIs"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"./build.sh -pyenv ${PYTHON_ENV_PATH} -bpath ${TWIXTER_BUILD_DIR} --all\n")),Object(l.b)("p",null,"Example:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"./build.sh -pyenv /home/<username>/build/twisterx/ENV -bpath /home/<username>/build/twisterx/build --all\n")),Object(l.b)("p",null,"or"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"./build.sh -pyenv /usr -bpath /home/<username>/build/twisterx/build --all\n")),Object(l.b)("h2",{id:"build-c-cylon-api"},"Build C++ Cylon API"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"./build.sh -bpath /home/<username>/build/twisterx/build --cpp\n")),Object(l.b)("p",null,"If you want to build each module separately make sure you build in the following order"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"/build.sh -bpath /home/vibhatha/build/twisterx/build --cpp\n/build.sh -pyenv /home/vibhatha/build/twisterx/ENV -bpath /home/vibhatha/build/twisterx/build --pyarrow\n/build.sh -pyenv /home/vibhatha/build/twisterx/ENV -bpath /home/vibhatha/build/twisterx/build --python\n")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-txt"}),"Note: The default build mode is debug\n")),Object(l.b)("p",null,"If you want to change the build modes, do the following"),Object(l.b)("h3",{id:"for-release-mode"},"For Release Mode"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"./build.sh -bpath /home/<username>/build/twisterx/build --cpp --release\n")),Object(l.b)("h3",{id:"for-debug-mode-optional"},"For Debug Mode (optional)"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"./build.sh -bpath /home/<username>/build/twisterx/build --cpp --debug\n")),Object(l.b)("h2",{id:"python-support"},"Python Support"),Object(l.b)("p",null,"Cylon provides Python APIs with Cython."),Object(l.b)("p",null,"If you're building for the first time, you can use ",Object(l.b)("inlineCode",{parentName:"p"},"--all")," option in build.\nIf you'have already built cpp and want to compile the your changes to the API,\ndo the following,"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"./build.sh -pyenv /home/<username>/build/twisterx/ENV -bpath /home/<username>/build/twisterx/build --python\n")),Object(l.b)("h3",{id:"example"},"Example"),Object(l.b)("p",null,"Before running the code in the base path of the cloned repo\nrun the following command. Or add this to your ",Object(l.b)("inlineCode",{parentName:"p"},"bashrc"),"."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"export LD_LIBRARY_PATH=/home/<username>/twisterx/build/arrow/install/lib:/home/<username>/twisterx/build/lib:$LD_LIBRARY_PATH\n")),Object(l.b)("ol",{start:4},Object(l.b)("li",{parentName:"ol"},"Test Python API")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"python3 python/test/test_pytwisterx.py\n")))}u.isMDXComponent=!0},135:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),u=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,c=b(e,["components","mdxType","originalType","parentName"]),p=u(n),d=a,m=p["".concat(o,".").concat(d)]||p[d]||s[d]||l;return n?r.a.createElement(m,i(i({ref:t},c),{},{components:n})):r.a.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=d;var i={};for(var b in t)hasOwnProperty.call(t,b)&&(i[b]=t[b]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<l;c++)o[c]=n[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);